{"version":3,"sources":["src/helper.js","src/people.js","src/index.js"],"names":["getRandomInt","min","max","Math","ceil","floor","random","make2DArray","rows","cols","res","Array","i","People","w","grid","j","ctx","x","y","fillRect","strokeRect","row","col","neighborCount","newRow","newCol","draw","nextGrid","neighbors","countNeighbors","state","canvas","document","getElementById","width","window","innerWidth","height","innerHeight","getContext","GAME_WIDTH","GAME_HEIGHT","people","fillWithRandomLives","console","log","lastTime","gameLoop","timeStamp","clearRect","liveToNextGeneration","requestAnimationFrame"],"mappings":"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","file":"src.7221888c.js","sourceRoot":"..","sourcesContent":["export function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n \r\nexport function make2DArray(rows, cols){\r\n  var res = new Array(rows);\r\n  for (var i = 0; i < rows; i++){\r\n    res[i] = new Array(cols);\r\n  }\r\n  return res;\r\n}","import { make2DArray} from \"./helper.js\";\r\n\r\nexport default class People {\r\n  constructor(rows, cols, w) {\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n    this.w = w;\r\n    this.grid = make2DArray(rows, cols);\r\n  }\r\n\r\n  fillWithRandomLives() {\r\n    var i;\r\n    for (i = 0; i < this.rows; i++) {\r\n      for (var j = 0; j < this.cols; j++) {\r\n        if (Math.random(1) < 0.5){\r\n          this.grid[i][j] = 1;\r\n        } else {\r\n          this.grid[i][j] = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    for (var i = 0; i < this.rows; i++) {\r\n      for (var j = 0; j < this.cols; j++) {\r\n        let x = j * this.w;\r\n        let y = i * this.w;\r\n        if (this.grid[i][j] === 0) {\r\n          ctx.fillRect(x, y, this.w, this.w);\r\n        } else {\r\n          ctx.strokeRect(x, y, this.w, this.w);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  countNeighbors(row, col) {\r\n    var neighborCount = 0;\r\n    for (var i = -1; i <= 1; i++) {\r\n      for (var j = -1; j <= 1; j++) {\r\n        if (i === 0 && j === 0)\r\n          continue;\r\n        var newRow = row + i;\r\n        var newCol = col + j;\r\n        //check for no out of bound exception\r\n        if (\r\n          newRow < 0 ||\r\n          newRow >= this.rows ||\r\n          newCol < 0 ||\r\n          newCol >= this.cols\r\n        ) {\r\n          continue;\r\n        }\r\n        neighborCount += this.grid[newRow][newCol];\r\n      }\r\n    }\r\n    return neighborCount;\r\n  }\r\n\r\n  liveToNextGeneration(ctx) {\r\n    this.draw(ctx);\r\n\r\n    let nextGrid = make2DArray(this.rows,this.cols);\r\n    for (var i = 0; i < this.rows; i++) {\r\n      for (var j = 0; j < this.cols; j++) {\r\n        var neighbors = this.countNeighbors(i, j);\r\n        let state = this.grid[i][j];\r\n        if (state === 0 && neighbors === 3){\r\n          nextGrid[i][j] = 1;\r\n        } else if (state === 1 && (neighbors < 2 || neighbors > 3)){\r\n          nextGrid[i][j] = 0;\r\n        } else {\r\n          nextGrid[i][j] = state;\r\n        }\r\n      }\r\n    }\r\n    this.grid = nextGrid;\r\n  }\r\n}\r\n","import People from \"./people.js\";\r\n\r\nlet canvas = document.getElementById(\"screen\");\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\nlet ctx = canvas.getContext(\"2d\");\r\n\r\nconst GAME_WIDTH = canvas.width;\r\nconst GAME_HEIGHT = canvas.height;\r\nvar w = 15;\r\nvar rows = Math.floor(GAME_HEIGHT / w);\r\nvar cols = Math.floor(GAME_WIDTH / w);\r\n\r\nvar people = new People(rows, cols, w);\r\npeople.fillWithRandomLives(20);\r\nconsole.log(people.grid);\r\n\r\nlet lastTime = 0;\r\nfunction gameLoop(timeStamp) {\r\n   // each iteration after 100 ms\r\n   if(!lastTime || timeStamp - lastTime >= 100) {\r\n    lastTime = timeStamp;\r\n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\r\n    people.liveToNextGeneration(ctx);\r\n  }\r\n  requestAnimationFrame(gameLoop);\r\n}\r\n\r\nrequestAnimationFrame(gameLoop);\r\n"]}